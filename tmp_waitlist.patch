     icon: ImageVector,
diff --git a/pLUCK/app/src/main/java/com/pluck/ui/screens/WaitlistScreen.kt b/pLUCK/app/src/main/java/com/pluck/ui/screens/WaitlistScreen.kt
index 5d196b6..aa86cb5 100644
--- a/pLUCK/app/src/main/java/com/pluck/ui/screens/WaitlistScreen.kt
+++ b/pLUCK/app/src/main/java/com/pluck/ui/screens/WaitlistScreen.kt
@@ -31,15 +31,23 @@ import androidx.compose.foundation.shape.CircleShape
 import androidx.compose.foundation.shape.RoundedCornerShape
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.ArrowBack
+import androidx.compose.material.icons.outlined.CheckCircle
 import androidx.compose.material.icons.outlined.Groups
 import androidx.compose.material.icons.outlined.Person
 import androidx.compose.material.icons.outlined.Schedule
+import androidx.compose.material3.ExperimentalMaterial3Api
+import androidx.compose.material3.FilterChip
+import androidx.compose.material3.FilterChipDefaults
 import androidx.compose.material3.Icon
 import androidx.compose.material3.IconButton
 import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.Surface
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.draw.clip
@@ -55,6 +63,14 @@ import com.pluck.ui.components.PluckPalette
 import com.pluck.ui.model.Event
 import java.time.LocalDate
 
+/**
+ * Tabs for waitlist view
+ */
+private enum class WaitlistTab {
+    WAITING,  // US 02.02.01: Entrants on waiting list
+    CHOSEN    // US 02.06.01: Chosen/selected entrants
+}
+
 /**
  * Data class representing a waitlist entry
  */
@@ -63,19 +79,25 @@ data class WaitlistEntry(
     val userName: String,
     val position: Int,
     val joinedDate: LocalDate,
-    val isCurrentUser: Boolean = false
+    val isCurrentUser: Boolean = false,
+    val isChosen: Boolean = false  // US 02.06.01: Track if entrant was selected in lottery
 )
 
 /**
- * Waitlist screen showing all users in the queue for an event
+ * US 02.02.01 & US 02.06.01: Waitlist screen showing waiting and chosen entrants
+ * Organizers can view both the waiting list and lottery-selected entrants
  */
+@OptIn(ExperimentalMaterial3Api::class)
 @Composable
 fun WaitlistScreen(
     event: Event,
     waitlistEntries: List<WaitlistEntry> = emptyList(),
+    chosenEntries: List<WaitlistEntry> = emptyList(),
     onBack: () -> Unit = {},
     modifier: Modifier = Modifier
 ) {
+    var selectedTab by remember { mutableStateOf(WaitlistTab.WAITING) }
+
     PluckLayeredBackground(modifier = modifier.fillMaxSize()) {
         Box(modifier = Modifier.fillMaxSize()) {
             // Back button
@@ -113,6 +135,14 @@ fun WaitlistScreen(
                 // Header Card
                 WaitlistHeaderCard(event = event)
 
+                // US 02.02.01 & US 02.06.01: Tab selector for Waiting vs Chosen
+                WaitlistTabSelector(
+                    selectedTab = selectedTab,
+                    onTabSelected = { selectedTab = it },
+                    waitingCount = waitlistEntries.size,
+                    chosenCount = chosenEntries.size
+                )
+
                 // Waitlist entries
                 Surface(
                     modifier = Modifier
@@ -124,9 +154,31 @@ fun WaitlistScreen(
                     shadowElevation = 12.dp,
                     border = BorderStroke(1.dp, PluckPalette.Primary.copy(alpha = 0.05f))
                 ) {
-                    when {
-                        waitlistEntries.isEmpty() -> WaitlistEmptyState()
-                        else -> WaitlistEntriesList(entries = waitlistEntries)
+                    when (selectedTab) {
+                        WaitlistTab.WAITING -> {
+                            when {
+                                waitlistEntries.isEmpty() -> WaitlistEmptyState(
+                                    message = "No one on the waitlist yet",
+                                    description = "Be the first to join the waitlist for this event!"
+                                )
+                                else -> WaitlistEntriesList(
+                                    entries = waitlistEntries,
+                                    title = "Waitlist Queue"
+                                )
+                            }
+                        }
+                        WaitlistTab.CHOSEN -> {
+                            when {
+                                chosenEntries.isEmpty() -> WaitlistEmptyState(
+                                    message = "No entrants chosen yet",
+                                    description = "Run the lottery to randomly select entrants from the waitlist."
+                                )
+                                else -> WaitlistEntriesList(
+                                    entries = chosenEntries,
+                                    title = "Chosen Entrants"
+                                )
+                            }
+                        }
                     }
                 }
             }
@@ -233,8 +285,77 @@ private fun WaitlistStatItem(
     }
 }
 
+/**
+ * US 02.02.01 & US 02.06.01: Tab selector for switching between views
+ */
+@OptIn(ExperimentalMaterial3Api::class)
 @Composable
-private fun WaitlistEntriesList(entries: List<WaitlistEntry>) {
+private fun WaitlistTabSelector(
+    selectedTab: WaitlistTab,
+    onTabSelected: (WaitlistTab) -> Unit,
+    waitingCount: Int,
+    chosenCount: Int
+) {
+    Surface(
+        modifier = Modifier
+            .fillMaxWidth()
+            .widthIn(max = 460.dp),
+        shape = RoundedCornerShape(24.dp),
+        color = PluckPalette.Surface,
+        tonalElevation = 0.dp,
+        shadowElevation = 12.dp,
+        border = BorderStroke(1.dp, PluckPalette.Primary.copy(alpha = 0.05f))
+    ) {
+        Row(
+            modifier = Modifier
+                .fillMaxWidth()
+                .padding(horizontal = 16.dp, vertical = 12.dp),
+            horizontalArrangement = Arrangement.spacedBy(12.dp)
+        ) {
+            FilterChip(
+                selected = selectedTab == WaitlistTab.WAITING,
+                onClick = { onTabSelected(WaitlistTab.WAITING) },
+                label = { Text("Waiting ($waitingCount)") },
+                leadingIcon = {
+                    Icon(
+                        Icons.Outlined.Schedule,
+                        contentDescription = null,
+                        modifier = Modifier.size(18.dp)
+                    )
+                },
+                modifier = Modifier.weight(1f),
+                colors = FilterChipDefaults.filterChipColors(
+                    containerColor = if (selectedTab == WaitlistTab.WAITING) PluckPalette.Tertiary else PluckPalette.Surface,
+                    labelColor = if (selectedTab == WaitlistTab.WAITING) Color.White else PluckPalette.Primary,
+                    selectedContainerColor = PluckPalette.Tertiary,
+                    selectedLabelColor = Color.White
+                )
+            )
+            FilterChip(
+                selected = selectedTab == WaitlistTab.CHOSEN,
+                onClick = { onTabSelected(WaitlistTab.CHOSEN) },
+                label = { Text("Chosen ($chosenCount)") },
+                leadingIcon = {
+                    Icon(
+                        Icons.Outlined.CheckCircle,
+                        contentDescription = null,
+                        modifier = Modifier.size(18.dp)
+                    )
+                },
+                modifier = Modifier.weight(1f),
+                colors = FilterChipDefaults.filterChipColors(
+                    containerColor = if (selectedTab == WaitlistTab.CHOSEN) PluckPalette.Accept else PluckPalette.Surface,
+                    labelColor = if (selectedTab == WaitlistTab.CHOSEN) Color.White else PluckPalette.Primary,
+                    selectedContainerColor = PluckPalette.Accept,
+                    selectedLabelColor = Color.White
+                )
+            )
+        }
+    }
+}
+
+@Composable
+private fun WaitlistEntriesList(entries: List<WaitlistEntry>, title: String) {
     val listState = rememberLazyListState()
     Column(
         modifier = Modifier
@@ -243,7 +364,7 @@ private fun WaitlistEntriesList(entries: List<WaitlistEntry>) {
         verticalArrangement = Arrangement.spacedBy(16.dp)
     ) {
         Text(
-            text = "Waitlist Queue",
+            text = title,
             style = MaterialTheme.typography.titleLarge.copy(
                 fontWeight = FontWeight.Bold,
                 color = PluckPalette.Primary
@@ -265,7 +386,12 @@ private fun WaitlistEntriesList(entries: List<WaitlistEntry>) {
 
 @Composable
 private fun WaitlistEntryCard(entry: WaitlistEntry) {
-    val accentColor = if (entry.isCurrentUser) PluckPalette.Secondary else PluckPalette.Primary
+    // US 02.06.01: Different styling for chosen entrants
+    val accentColor = when {
+        entry.isChosen -> PluckPalette.Accept
+        entry.isCurrentUser -> PluckPalette.Secondary
+        else -> PluckPalette.Primary
+    }
 
     Surface(
         modifier = Modifier.fillMaxWidth(),
@@ -339,12 +465,16 @@ private fun WaitlistEntryCard(entry: WaitlistEntry) {
 
             Surface(
                 shape = RoundedCornerShape(16.dp),
-                color = accentColor.copy(alpha = if (entry.isCurrentUser) 0.25f else 0.15f),
+                color = accentColor.copy(alpha = if (entry.isCurrentUser || entry.isChosen) 0.25f else 0.15f),
                 tonalElevation = 0.dp,
                 shadowElevation = 0.dp
             ) {
                 Text(
-                    text = if (entry.isCurrentUser) "You" else "In Queue",
+                    text = when {
+                        entry.isChosen -> "Selected"
+                        entry.isCurrentUser -> "You"
+                        else -> "In Queue"
+                    },
                     modifier = Modifier.padding(horizontal = 14.dp, vertical = 6.dp),
                     style = MaterialTheme.typography.labelMedium.copy(
                         fontWeight = FontWeight.SemiBold,
@@ -357,7 +487,7 @@ private fun WaitlistEntryCard(entry: WaitlistEntry) {
 }
 
 @Composable
-private fun WaitlistEmptyState() {
+private fun WaitlistEmptyState(message: String, description: String) {
     Column(
         modifier = Modifier
             .fillMaxSize()
@@ -366,7 +496,7 @@ private fun WaitlistEmptyState() {
         horizontalAlignment = Alignment.CenterHorizontally
     ) {
         Text(
-            text = "No one on the waitlist yet",
+            text = message,
             style = MaterialTheme.typography.titleMedium.copy(
                 fontWeight = FontWeight.SemiBold,
                 color = PluckPalette.Primary
@@ -375,7 +505,7 @@ private fun WaitlistEmptyState() {
         )
         Spacer(modifier = Modifier.height(12.dp))
         Text(
-            text = "Be the first to join the waitlist for this event!",
+            text = description,
             style = MaterialTheme.typography.bodyMedium.copy(
                 color = PluckPalette.Muted
             ),
@@ -434,9 +564,27 @@ private fun WaitlistScreenPreview() {
         )
     )
 
+    val previewChosenEntries = listOf(
+        WaitlistEntry(
+            id = "6",
+            userName = "Frank Wilson",
+            position = 1,
+            joinedDate = LocalDate.now().minusDays(4),
+            isChosen = true
+        ),
+        WaitlistEntry(
+            id = "7",
+            userName = "Grace Lee",
+            position = 2,
+            joinedDate = LocalDate.now().minusDays(2),
+            isChosen = true
+        )
+    )
+
     WaitlistScreen(
         event = previewEvent,
         waitlistEntries = previewEntries,
+        chosenEntries = previewChosenEntries,
         onBack = {}
     )
 }
